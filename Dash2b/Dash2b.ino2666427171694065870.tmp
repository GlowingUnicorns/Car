#include <TM1637Display.h>
#include <SPI.h>
//#include<Wire.h>
#include <mcp2515.h>
#include "LedControl.h"
//#include <LiquidCrystal_I2C.h>

struct can_frame canMsg;
MCP2515 mcp2515(10);
LedControl lc1=LedControl(A1,A0,A2,2);
LedControl lc2=LedControl(A1,A0,A3,2);
//LiquidCrystal_I2C lcd(0x27, 20, 4);

TM1637Display disp1(9,8);
TM1637Display disp2(9,7);
TM1637Display disp3(9,6);
TM1637Display disp4(9,5);
TM1637Display disp5(9,4);
TM1637Display disp6(9,3);

volatile uint8_t arr[100] = {1,2,3,4,5,6,7,8,9,10};


void setup() {
  Serial.begin(115200);
//  Wire.begin(0x10);

  disp1.setBrightness(0x0f);
  disp2.setBrightness(0x0f);
  disp3.setBrightness(0x0f);
  disp4.setBrightness(0x0f);
  disp5.setBrightness(0x0f);
  disp6.setBrightness(0x0f);

  lc1.shutdown(0,false);
  lc2.shutdown(0,false);
  lc1.setIntensity(0,8);
  lc2.setIntensity(0,8);
  lc1.clearDisplay(0);
  lc2.clearDisplay(0);
  
  mcp2515.reset();
  mcp2515.setBitrate(CAN_1000KBPS,MCP_8MHZ);
  mcp2515.setNormalMode();
  
//  lcd.init();
//  lcd.backlight();
  
}
uint8_t data[] = { 0xff, 0xff, 0xff, 0xff };
uint8_t blank[] = { 0x00, 0x00, 0x00, 0x00 };


uint16_t bufStart = 0;
uint16_t timer = 0; 
uint16_t timer2 = 0; 
uint16_t timer3 = 0; 
void loop() {
  if(timer++ > 500){
    timer = 0; 
    disp1.showNumberDec((double(arr[0]) + double(arr[1]) *0.01)*100 ,false);
    disp2.showNumberDec(arr[2],false);
    disp3.showNumberDec(double(arr[3] * 10) +double(arr[4])*0.1,false);
    disp4.showNumberDec(arr[6],false);
    disp5.showNumberDec(arr[7],false);
    disp6.showNumberDec(arr[8],false); 
  }
  else if (timer2++ > 2000){
    timer2 = 0; 
    lc1.setChar(0,7,'5',false);
    lc1.setChar(0,6,'o',false);
    lc1.setChar(0,5,'C',false);
  
    lc2.setChar(0,7,'c',false);
    lc2.setChar(0,6,'A',false);
    lc2.setChar(0,5,'P',false);

    lc1.setDigit(0,3,5,false);
    lc1.setDigit(0,2,5,false);
    lc1.setDigit(0,1,5,false);
    lc1.setDigit(0,0,5,false);

    lc2.setDigit(0,3,1,false);
    lc2.setDigit(0,2,2,false);
    lc2.setDigit(0,1,3,false);
    lc2.setDigit(0,0,4,false);
//    lcd.setCursor(0,0);
//    lcd.print("inactive");
  }
  if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) {
    switch(canMsg.can_id){
      case 0x011:bufStart = 0;break;
      case 0x012:bufStart = 8;break;
      case 0x013:bufStart = 16;break;
      case 0x014:bufStart = 24;break;
      case 0x015:bufStart = 32;break;
      case 0x016:bufStart = 40;break;
      case 0x017:bufStart = 48;break;
      case 0x018:bufStart = 56;break;
      case 0x019:bufStart = 64;break;
    }
    for ( uint8_t i = bufStart; i < bufStart + 8; i++ ) {
      arr[i] = canMsg.data[i-bufStart];
      Serial.print(arr[i]);
    }
    Serial.println("");

  }
  
}
